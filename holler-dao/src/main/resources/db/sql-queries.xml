<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<bean id="queryDao" class="com.holler.holler_dao.QueryDao">
		<property name="map">
			<map>

				<entry key="AUTHENTICATE_USER" value="SELECT * FROM user where email = ? and password = ?">
				</entry>
				
				<entry key="AUTHENTICATE_USER_WITH_PHONE_NUMBER" value="SELECT * FROM user where email = ? and phone_number = ?">
				</entry>

				<entry key="GET_USER_JOBS" >
					<value>
						SELECT jobs.* FROM jobs jobs
						JOIN user_job_map map ON  map.jobid = jobs.id
						JOIN USER usr ON (usr.id = map.userid AND usr.id = :requestUserId );
					</value>
				</entry>
				<entry key="GET_JOBS_BY_TAG" >
					<value>
						SELECT j.* FROM
						jobs AS j JOIN job_tag AS jt ON j.id = jt.job_id
						JOIN tags AS t ON (jt.tag_id = t.id AND t.tag_name LIKE (:searchedTag))
						GROUP BY j.id
					</value>
				</entry>
				<entry key="GET_ACCEPTED_USERS_BY_JOB_ID" >
					<value>
						select usr.* from user usr
						join user_job uj on usr.id = uj.userId
						And uj.jobId=:jobId and uj.status IN (:userJobStatus);
					</value>
				</entry>
				<entry key="GET_JOBS_BY_TAG_IDS" >
					<value>
						SELECT *,
							CASE WHEN X.tagIds = :tagIdsString THEN 0 ELSE 1 END AS jobOrder
						FROM (
							SELECT
								j.*,
								GROUP_CONCAT(t.id) AS tagIds
							FROM
								jobs AS j JOIN job_tag AS jt ON j.id = jt.job_id
								JOIN tags AS t ON (jt.tag_id = t.id AND t.id IN (:tagIds))
								GROUP BY j.id
						) AS X
						ORDER BY jobOrder ASC
					</value>
				</entry>
				<entry key="ACCEPT_JOB" >
					<value>
						INSERT INTO user_job(userId, jobId, status) VALUES(:userId, :jobId, :status)
					</value>
				</entry>
				<entry key="UNACCEPT_JOB" >
					<value>
						DELETE FROM user_job WHERE userId = :userId AND jobId = :jobId
					</value>
				</entry>
				<entry key="UPDATE_JOB" >
					<value>
						UPDATE user_job SET status = :status WHERE userId = :userId AND jobId = :jobId
					</value>
				</entry>

				<entry key="GET_TAGS_FOR_USER_HOME_PAGE" >
					<value>
						SELECT X.* FROM
						(
							SELECT
								t.*,
								CASE WHEN ut.user_id > 0 THEN 0 ELSE 1 END AS tagOrder
							FROM
								job_tag jt
								JOIN tags t ON jt.tag_id = t.id
								LEFT JOIN (SELECT * FROM user_tag WHERE user_id = :userId) ut ON jt.tag_id = ut.tag_id
								GROUP BY jt.tag_id
						) AS X ORDER BY X.tagOrder ASC
					</value>
				</entry>
				<entry key="GET_MY_PINGED_JOBS" >
					<value>
						SELECT j.* FROM jobs j JOIN user_job uj ON
							j.id = uj.jobId AND uj.userId = :userId
					</value>
				</entry>
				<entry key="GET_USERS_IDS_BY_TAG_IDS" >
					<value>
						SELECT DISTINCT(user_id) FROM user_tag WHERE tag_id IN (:tagIds)
					</value>
				</entry>
				<entry key="GET_USERS_UNREAD_NOTIFICATION_COUNT" >
					<value>
						SELECT count(*) from notification where to_user = :userId and is_read  = 0;
					</value>
				</entry>
				<entry key="GET_NOTIFICATION_TEMPLATE">
					<value>
						SELECT nt.id , ntt.type, nt.from_user, nt.object_id, usr.name, jb.job_title, temp.note
						FROM notification nt
						LEFT JOIN notification_type ntt on (nt.notification_type = ntt.type)
						LEFT JOIN template_notification_type_map tnm ON (ntt.id = tnm.notification_type_id)
						LEFT JOIN template temp ON (tnm.temp_id = temp.id)
						LEFT JOIN jobs jb ON (nt.object_id = jb.id)
						LEFT JOIN user usr ON (nt.from_user  = usr.id)
						where nt.to_user = :userId order by nt.created desc;
					</value>

				</entry>



			</map>
		</property>
	</bean>

</beans>